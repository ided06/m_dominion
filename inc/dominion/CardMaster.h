//=============================================================================
/// @class CardMaster.h
/// @brief カードの中身
/// @author ide
/// @since 14/02/20
/// @version $Revision$
/// 最終更新者 : $Author$<BR>
/// 
/// 
/// <H2>更新履歴</H2>
// @author 
// @data 
// 
// @todo 
// @bug 
// @defgroup 
// @ingroup 
//=============================================================================
#ifndef DOMINION_CARD_MASTER_H
#define DOMINION_CARD_MASTER_H
//-----------------------------------------------------------------------------
// include files
//-----------------------------------------------------------------------------
#include <string>
//-----------------------------------------------------------------------------
// class
//-----------------------------------------------------------------------------
namespace dominion {
    class CardMaster {
    public:
        /// カード属性
        enum Attribute {
            ATTRIBUTE_TREASURE,        //財宝
            ATTRIBUTE_VICTORY_POINT,   //勝利点
            ATTRIBUTE_MAX,
            ATTRIBUTE_INVALID,
            FORCE_DWORD         = 0xFFFFFFFF
        };
        //---------------------------------------------------------------------
        /// @brief コンストラクタ
        //---------------------------------------------------------------------
        CardMaster(const char *name, int attributeField) : mName(name), mAttributeField(attributeField) {}
        //---------------------------------------------------------------------
        /// @brief 仮想デストラクタ
        //---------------------------------------------------------------------
        virtual ~CardMaster(void) {}
        //---------------------------------------------------------------------
        /// @brief この属性を持っていますか？
        /// @return true:はい　false:いいえ
        //---------------------------------------------------------------------
        bool hasThisAttribute(Attribute attribute) const;
        //---------------------------------------------------------------------
        /// @brief 文字列表現の取得
        /// @return 文字列表現
        //---------------------------------------------------------------------
        virtual std::string toString(void) const;
        //---------------------------------------------------------------------
        /// @brief 与えられた属性のみを含む属性フィールドを返す
        /// @param attribute 元となる属性
        /// @return 属性フィールド
        //---------------------------------------------------------------------
        static int getAttributeField(Attribute attribute);
        //---------------------------------------------------------------------
        /// @brief 名前の取得
        /// @return 名前
        //---------------------------------------------------------------------
        const char *getName(void) const { return mName.c_str(); }
    protected:
        std::string mName;
        int mAttributeField;
    };
}
#endif
//-----------------------------------------------------------------------------
// End Of File
//-----------------------------------------------------------------------------
