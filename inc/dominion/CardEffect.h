//=============================================================================
/// @class Card.h
/// @brief カード
/// @author ide
/// @since 14/02/20
/// @version $Revision$
/// 最終更新者 : $Author$<BR>
/// 
/// 
/// <H2>更新履歴</H2>
// @author 
// @data 
// 
// @todo 
// @bug 
// @defgroup 
// @ingroup 
//=============================================================================
#ifndef DOMINION_CARD_EFFECT_H
#define DOMINION_CARD_EFFECT_H
//-----------------------------------------------------------------------------
// include files
//-----------------------------------------------------------------------------
#include <string>
//-----------------------------------------------------------------------------
// class
//-----------------------------------------------------------------------------
namespace dominion {
    class CardEffect {
    public:
        /// カードタイプ
        enum Type {
            TYPE_TREASURE,        //財宝
            TYPE_VICTORY_POINT,   //勝利点
            TYPE_MAX,
            TYPE_INVALID,
            FORCE_DWORD         = 0xFFFFFFFF
        };
        //---------------------------------------------------------------------
        /// @brief コンストラクタ
        //---------------------------------------------------------------------
        CardEffect(int typeField) : mTypeFlag(typeField) {}
        //---------------------------------------------------------------------
        /// @brief 仮想デストラクタ
        //---------------------------------------------------------------------
        virtual ~CardEffect(void) {}
        //---------------------------------------------------------------------
        /// @brief このタイプですか？
        /// @return true:はい　false:いいえ
        //---------------------------------------------------------------------
        bool isThisType(Type type) const;
        //---------------------------------------------------------------------
        /// @brief 文字列表現の取得
        /// @return 文字列表現
        //---------------------------------------------------------------------
        virtual std::string toString(void) const;
        //---------------------------------------------------------------------
        /// @brief タイプからタイプフィールドを取得します
        /// @param type 元となるタイプ
        /// @return タイプフィールド
        //---------------------------------------------------------------------
        static int getTypeField(Type type) const;
    private:
        int mTypeField;
    };
}
#endif
//-----------------------------------------------------------------------------
// End Of File
//-----------------------------------------------------------------------------
