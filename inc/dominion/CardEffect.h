//=============================================================================
/// @class Card.h
/// @brief カード
/// @author ide
/// @since 14/02/20
/// @version $Revision$
/// 最終更新者 : $Author$<BR>
/// 
/// 
/// <H2>更新履歴</H2>
// @author 
// @data 
// 
// @todo 
// @bug 
// @defgroup 
// @ingroup 
//=============================================================================
#ifndef DOMINION_CARD_EFFECT_H
#define DOMINION_CARD_EFFECT_H
//-----------------------------------------------------------------------------
// include files
//-----------------------------------------------------------------------------
#include <string>
//-----------------------------------------------------------------------------
// class
//-----------------------------------------------------------------------------
namespace dominion {
    class CardEffect {
    public:
        /// カードタイプ
        enum Type {
            TYPE_TREASURE       = 0x1 << 0,        //財宝
            TYPE_VICTORY_POINT  = 0x1 << 1,        //勝利点
            TYPE_INVALID        = 0x0,
            FORCE_DWORD         = 0xFFFFFFFF
        };
        //---------------------------------------------------------------------
        /// @brief コンストラクタ
        //---------------------------------------------------------------------
        CardEffect(Type type) : mType(type) {}
        //---------------------------------------------------------------------
        /// @brief 仮想デストラクタ
        //---------------------------------------------------------------------
        virtual ~CardEffect(void) {}
        //---------------------------------------------------------------------
        /// @brief タイプの取得
        /// @return タイプ
        //---------------------------------------------------------------------
        Type getType(void) const { return mType; }
        //---------------------------------------------------------------------
        /// @brief 文字列表現の取得
        /// @return 文字列表現
        //---------------------------------------------------------------------
        virtual std::string toString(void) const;
    private:
        Type mType;
    };
}
#endif
//-----------------------------------------------------------------------------
// End Of File
//-----------------------------------------------------------------------------
